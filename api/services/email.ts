import { Resend } from 'resend';
import type { EarlyAccessRequest } from '../handlers/early-access';

const resend = new Resend(process.env.RESEND_API_KEY);

export interface EmailServiceConfig {
  to: string;
  from: string;
}

export interface EmailServiceResponse {
  id: string;
  success: boolean;
  error?: string;
}

export class EmailService {
  private config: EmailServiceConfig;

  constructor() {
    const to = process.env.BETA_NOTIFICATION_TO;
    const from = process.env.BETA_NOTIFICATION_FROM;

    if (!process.env.RESEND_API_KEY) {
      throw new Error('Missing RESEND_API_KEY environment variable');
    }

    if (!to || !from) {
      throw new Error(
        'Missing email configuration: BETA_NOTIFICATION_TO and BETA_NOTIFICATION_FROM are required'
      );
    }

    this.config = { to, from };
  }

  /**
   * Send notification email when a user requests beta access
   */
  async sendBetaRequestNotification(
    request: EarlyAccessRequest
  ): Promise<EmailServiceResponse> {
    if (!process.env.RESEND_API_KEY) {
      throw new Error('Resend API key not configured');
    }

    const formatDate = (timestamp: string) => {
      return new Date(timestamp).toLocaleString('en-US', {
        timeZone: 'UTC',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    };

    const emailBody = `
New Beta Access Request for SyncFlow

üìß Email: ${request.email}
‚è∞ Submitted: ${formatDate(request.timestamp)} UTC
üåç IP Address: ${request.ip || 'unknown'}
üñ•Ô∏è  User Agent: ${request.userAgent || 'unknown'}

---
This notification was automatically generated by the SyncFlow beta access system.
    `.trim();

    try {
      const { data, error } = await resend.emails.send({
        from: this.config.from,
        to: this.config.to,
        subject: 'üöÄ New SyncFlow Beta Access Request',
        text: emailBody,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <h2 style="color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px;">
              üöÄ New SyncFlow Beta Access Request
            </h2>
            
            <div style="background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <table style="width: 100%; border-collapse: collapse;">
                <tr>
                  <td style="padding: 8px 0; font-weight: bold; width: 120px;">üìß Email:</td>
                  <td style="padding: 8px 0;"><a href="mailto:${request.email}">${request.email}</a></td>
                </tr>
                <tr>
                  <td style="padding: 8px 0; font-weight: bold;">‚è∞ Submitted:</td>
                  <td style="padding: 8px 0;">${formatDate(request.timestamp)} UTC</td>
                </tr>
                <tr>
                  <td style="padding: 8px 0; font-weight: bold;">üåç IP Address:</td>
                  <td style="padding: 8px 0;">${request.ip || 'unknown'}</td>
                </tr>
                <tr>
                  <td style="padding: 8px 0; font-weight: bold;">üñ•Ô∏è User Agent:</td>
                  <td style="padding: 8px 0; font-family: monospace; font-size: 12px;">
                    ${request.userAgent || 'unknown'}
                  </td>
                </tr>
              </table>
            </div>
            
            <p style="color: #666; font-size: 12px; margin-top: 30px; border-top: 1px solid #ddd; padding-top: 15px;">
              This notification was automatically generated by the SyncFlow beta access system.
            </p>
          </div>
        `,
      });

      if (error) {
        return {
          id: '',
          success: false,
          error: error.message || 'Failed to send email',
        };
      }

      return {
        id: data?.id || '',
        success: true,
      };
    } catch (error) {
      return {
        id: '',
        success: false,
        error: error instanceof Error ? error.message : 'Unknown email error',
      };
    }
  }

  /**
   * Check if email notifications are enabled
   */
  isEnabled(): boolean {
    const enabledEnv = process.env.EMAIL_NOTIFICATIONS_ENABLED;
    return enabledEnv !== 'false' && enabledEnv !== '0';
  }
}

// Singleton instance
let emailService: EmailService | null = null;

export function getEmailService(): EmailService {
  if (!emailService) {
    emailService = new EmailService();
  }
  return emailService;
}

// Export convenience function for backward compatibility
export async function sendBetaRequestEmail(
  request: EarlyAccessRequest
): Promise<EmailServiceResponse> {
  const service = getEmailService();

  if (!service.isEnabled()) {
    console.log('Email notifications disabled via EMAIL_NOTIFICATIONS_ENABLED');
    return {
      id: 'disabled',
      success: true,
    };
  }

  return service.sendBetaRequestNotification(request);
}
